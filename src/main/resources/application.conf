env = ${TSENV}
zoneOffset = -4

io-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // or in Akka 2.4.2+
    fixed-pool-size = 40
  }
  throughput = 100
}

//profiles
passivationTimeout = 40

TEST{
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters-during-shutdown = off
    log-dead-letters = off

    persistence {
      journal.plugin = "inmemory-journal"
      snapshot-store.plugin = "inmemory-snapshot-store"
    }
  }

  jms{
    url = "tcp://localhost:61616"
    consumerQueue = "Consumer.alarmss.VirtualTopic.DEVICE_EVENT_INTEGRATIONS"
  }

  mongo {
    url = "mongodb://localhost:27017"
    dbname=alarms_ms
    programmedAlarms=alarms_ms_col
    dbWebNotifications=web_notifications
    webNotificationsCollection=notifications
  }

  mail{
    url = "http://localhost/cxf/ws/mail/send"
  }
}

LOCAL{
  passivationTimeout = 40

  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters-during-shutdown = off
    log-dead-letters = off

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
      warn-about-java-serializer-usage = off
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "localhost"
        port = 0
      }
    }
    cluster {
      seed-nodes = [
        "akka.tcp://AlarmsSystem@localhost:50000"
      ]
      auto-down-unreachable-after = off
      metrics.enabled = off
    }
    persistence {
      journal.plugin = "akka-contrib-mongodb-persistence-journal"
      snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
    }
    contrib.persistence.mongodb.mongo.mongouri = "mongodb://gracious-neck.maas.reddsystem.com:27017"
    contrib.persistence.mongodb.mongo.database = "alarms-states"
    contrib.persistence.mongodb.mongo.journal-wtimeout = 15s
    contrib.persistence.mongodb.mongo.breaker.maxTries = 0
    contrib.persistence.mongodb.mongo.breaker.timeout.call = 15s

  }

  jms{
    url = "tcp://gracious-neck.maas.reddsystem.com:61616"
    consumerQueue = "Consumer.alarmss.VirtualTopic.DEVICE_EVENT_INTEGRATIONS"
  }

  mongo {
    url = "mongodb://gracious-neck.maas.reddsystem.com:27017"
    dbname=alarms_ms
    programmedAlarms=alarms_ms_col
    dbWebNotifications=web_notifications
    webNotificationsCollection=notifications
  }

  mail{
    url = "http://gracious-neck.maas.reddsystem.com/cxf/ws/mail/send"
  }
}

AWS-QA{
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters-during-shutdown = off
    log-dead-letters = off

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
//  "could not resolve substitution to a value ${TSIP}"
//    remote {
//      log-remote-lifecycle-events = off
//      netty.tcp {
//        hostname = ${TSIP}
//        port = 0
//      }
//    }
    cluster {
      seed-nodes = [
        "akka.tcp://AlarmsSystem@172.31.2.186:50000",
        "akka.tcp://AlarmsSystem@172.31.2.117:50000"
      ]
      auto-down-unreachable-after = off
      metrics.enabled = off
    }
    persistence {
      journal.plugin = "akka-contrib-mongodb-persistence-journal"
      snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
    }
    contrib.persistence.mongodb.mongo.mongouri = "mongodb://laststate01.qa.reddsystem.com:27017"
    contrib.persistence.mongodb.mongo.database = "alarms-state"
    contrib.persistence.mongodb.mongo.journal-wtimeout = 10s
    contrib.persistence.mongodb.mongo.breaker.maxTries = 0
    contrib.persistence.mongodb.mongo.breaker.timeout.call = 10s
  }
  jms{
    url = "tcp://activemq02.qa.reddsystem.com:61616"
    consumerQueue = "TRAMA-V2"
  }

  mongo {
    url = "mongodb://laststate01.qa.reddsystem.com:27017"
    dbname=alarms_ms
    programmedAlarms=alarms_ms_col
    dbWebNotifications=web_notifications
    webNotificationsCollection=notifications
  }

  mail{
    url = "http://esb01.qa.reddsystem.com/cxf/ws/mail/send"
  }
}

AWS-PROD{
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters-during-shutdown = off
    log-dead-letters = off

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
//    remote {
//      log-remote-lifecycle-events = off
//      netty.tcp {
//        hostname = ${TSIP}
//        port = 0
//      }
//    }
    cluster {
      seed-nodes = [
        "akka.tcp://AlarmsSystem@10.0.2.234:50000",
        "akka.tcp://AlarmsSystem@10.0.3.162:50000"
      ]
      auto-down-unreachable-after = off
      metrics.enabled = off
    }
    persistence {
      journal.plugin = "akka-contrib-mongodb-persistence-journal"
      snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
    }

    contrib.persistence.mongodb.mongo.mongouri = "mongodb://laststate01.prod.reddsystem.com:27017,laststate02.prod.reddsystem.com:27017/?replicaSet=laststate"
    contrib.persistence.mongodb.mongo.database = "alarms-state"
    contrib.persistence.mongodb.mongo.journal-wtimeout = 20s
    contrib.persistence.mongodb.mongo.breaker.maxTries = 0
    contrib.persistence.mongodb.mongo.breaker.timeout.call = 20s
  }
  jms{
    url = "tcp://activemq02.prod.reddsystem.com:61616"
    consumerQueue = "Consumer.alarms.VirtualTopic.DEVICE_EVENT_INTEGRATIONS"
  }

  mongo {
    url = "mongodb://laststate01.prod.reddsystem.com:27017,laststate02.prod.reddsystem.com:27017/?replicaSet=laststate"
    dbname=alarms_ms
    programmedAlarms=alarms_ms_col
    dbWebNotifications=web_notifications
    webNotificationsCollection=notifications
  }

  mail{
    url = "http://servicios.prod.reddsystem.com/cxf/ws/mail/send"
  }
}